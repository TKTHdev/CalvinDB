// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scalar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "scalar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class ScalarDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Scalar> {
} _Scalar_default_instance_;
class EmptyProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmptyProto> {
} _EmptyProto_default_instance_;
class UInt64PairDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UInt64Pair> {
} _UInt64Pair_default_instance_;
class SequenceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Sequence> {
} _Sequence_default_instance_;
class SequenceBatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SequenceBatch> {
} _SequenceBatch_default_instance_;

namespace protobuf_scalar_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, bool_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, int32_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, int64_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, uint32_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, uint64_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, float_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, double_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scalar, string_value_),
  8,
  1,
  2,
  3,
  5,
  4,
  6,
  7,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt64Pair, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt64Pair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt64Pair, first_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt64Pair, second_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sequence, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sequence, batch_ids_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SequenceBatch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SequenceBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SequenceBatch, sequence_batch_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 13, sizeof(Scalar)},
  { 22, 26, sizeof(EmptyProto)},
  { 26, 32, sizeof(UInt64Pair)},
  { 34, 39, sizeof(Sequence)},
  { 40, 45, sizeof(SequenceBatch)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Scalar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmptyProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UInt64Pair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Sequence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SequenceBatch_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "scalar.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _Scalar_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _EmptyProto_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _UInt64Pair_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Sequence_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SequenceBatch_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Scalar_default_instance_.DefaultConstruct();
  _EmptyProto_default_instance_.DefaultConstruct();
  _UInt64Pair_default_instance_.DefaultConstruct();
  _Sequence_default_instance_.DefaultConstruct();
  _SequenceBatch_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014scalar.proto\"\316\002\n\006Scalar\022&\n\004type\030\001 \002(\0162"
      "\022.Scalar.ScalarType:\004UNIT\022\022\n\nbool_value\030"
      "\002 \001(\010\022\023\n\013int32_value\030\003 \001(\005\022\023\n\013int64_valu"
      "e\030\004 \001(\003\022\024\n\014uint32_value\030\005 \001(\r\022\024\n\014uint64_"
      "value\030\006 \001(\004\022\023\n\013float_value\030\007 \001(\002\022\024\n\014doub"
      "le_value\030\010 \001(\001\022\024\n\014string_value\030\t \001(\t\"q\n\n"
      "ScalarType\022\010\n\004UNIT\020\001\022\010\n\004BOOL\020\002\022\t\n\005INT32\020"
      "\003\022\t\n\005INT64\020\004\022\n\n\006UINT32\020\005\022\n\n\006UINT64\020\006\022\t\n\005"
      "FLOAT\020\007\022\n\n\006DOUBLE\020\010\022\n\n\006STRING\020\t\"\014\n\nEmpty"
      "Proto\"+\n\nUInt64Pair\022\r\n\005first\030\001 \001(\004\022\016\n\006se"
      "cond\030\002 \001(\004\"\035\n\010Sequence\022\021\n\tbatch_ids\030\001 \003("
      "\004\"2\n\rSequenceBatch\022!\n\016sequence_batch\030\001 \003"
      "(\0132\t.Sequence"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 493);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "scalar.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_scalar_2eproto

const ::google::protobuf::EnumDescriptor* Scalar_ScalarType_descriptor() {
  protobuf_scalar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_scalar_2eproto::file_level_enum_descriptors[0];
}
bool Scalar_ScalarType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Scalar_ScalarType Scalar::UNIT;
const Scalar_ScalarType Scalar::BOOL;
const Scalar_ScalarType Scalar::INT32;
const Scalar_ScalarType Scalar::INT64;
const Scalar_ScalarType Scalar::UINT32;
const Scalar_ScalarType Scalar::UINT64;
const Scalar_ScalarType Scalar::FLOAT;
const Scalar_ScalarType Scalar::DOUBLE;
const Scalar_ScalarType Scalar::STRING;
const Scalar_ScalarType Scalar::ScalarType_MIN;
const Scalar_ScalarType Scalar::ScalarType_MAX;
const int Scalar::ScalarType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scalar::kTypeFieldNumber;
const int Scalar::kBoolValueFieldNumber;
const int Scalar::kInt32ValueFieldNumber;
const int Scalar::kInt64ValueFieldNumber;
const int Scalar::kUint32ValueFieldNumber;
const int Scalar::kUint64ValueFieldNumber;
const int Scalar::kFloatValueFieldNumber;
const int Scalar::kDoubleValueFieldNumber;
const int Scalar::kStringValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scalar::Scalar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_scalar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Scalar)
}
Scalar::Scalar(const Scalar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_string_value()) {
    string_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_value_);
  }
  ::memcpy(&bool_value_, &from.bool_value_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&bool_value_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Scalar)
}

void Scalar::SharedCtor() {
  _cached_size_ = 0;
  string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bool_value_, 0, reinterpret_cast<char*>(&double_value_) -
    reinterpret_cast<char*>(&bool_value_) + sizeof(double_value_));
  type_ = 1;
}

Scalar::~Scalar() {
  // @@protoc_insertion_point(destructor:Scalar)
  SharedDtor();
}

void Scalar::SharedDtor() {
  string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Scalar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scalar::descriptor() {
  protobuf_scalar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_scalar_2eproto::file_level_metadata[0].descriptor;
}

const Scalar& Scalar::default_instance() {
  protobuf_scalar_2eproto::InitDefaults();
  return *internal_default_instance();
}

Scalar* Scalar::New(::google::protobuf::Arena* arena) const {
  Scalar* n = new Scalar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Scalar::Clear() {
// @@protoc_insertion_point(message_clear_start:Scalar)
  if (has_string_value()) {
    GOOGLE_DCHECK(!string_value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*string_value_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&bool_value_, 0, reinterpret_cast<char*>(&double_value_) -
      reinterpret_cast<char*>(&bool_value_) + sizeof(double_value_));
  }
  type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Scalar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Scalar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Scalar.ScalarType type = 1 [default = UNIT];
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Scalar_ScalarType_IsValid(value)) {
            set_type(static_cast< ::Scalar_ScalarType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bool_value = 2;
      case 2: {
        if (tag == 16u) {
          set_has_bool_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bool_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 int32_value = 3;
      case 3: {
        if (tag == 24u) {
          set_has_int32_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int32_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 int64_value = 4;
      case 4: {
        if (tag == 32u) {
          set_has_int64_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int64_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 uint32_value = 5;
      case 5: {
        if (tag == 40u) {
          set_has_uint32_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 uint64_value = 6;
      case 6: {
        if (tag == 48u) {
          set_has_uint64_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uint64_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float float_value = 7;
      case 7: {
        if (tag == 61u) {
          set_has_float_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double double_value = 8;
      case 8: {
        if (tag == 65u) {
          set_has_double_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string string_value = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_value().data(), this->string_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Scalar.string_value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Scalar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Scalar)
  return false;
#undef DO_
}

void Scalar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Scalar)
  // required .Scalar.ScalarType type = 1 [default = UNIT];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bool bool_value = 2;
  if (has_bool_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bool_value(), output);
  }

  // optional int32 int32_value = 3;
  if (has_int32_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->int32_value(), output);
  }

  // optional int64 int64_value = 4;
  if (has_int64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->int64_value(), output);
  }

  // optional uint32 uint32_value = 5;
  if (has_uint32_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uint32_value(), output);
  }

  // optional uint64 uint64_value = 6;
  if (has_uint64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->uint64_value(), output);
  }

  // optional float float_value = 7;
  if (has_float_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->float_value(), output);
  }

  // optional double double_value = 8;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->double_value(), output);
  }

  // optional string string_value = 9;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Scalar.string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->string_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Scalar)
}

::google::protobuf::uint8* Scalar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Scalar)
  // required .Scalar.ScalarType type = 1 [default = UNIT];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bool bool_value = 2;
  if (has_bool_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bool_value(), target);
  }

  // optional int32 int32_value = 3;
  if (has_int32_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->int32_value(), target);
  }

  // optional int64 int64_value = 4;
  if (has_int64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->int64_value(), target);
  }

  // optional uint32 uint32_value = 5;
  if (has_uint32_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uint32_value(), target);
  }

  // optional uint64 uint64_value = 6;
  if (has_uint64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->uint64_value(), target);
  }

  // optional float float_value = 7;
  if (has_float_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->float_value(), target);
  }

  // optional double double_value = 8;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->double_value(), target);
  }

  // optional string string_value = 9;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Scalar.string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->string_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Scalar)
  return target;
}

size_t Scalar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Scalar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .Scalar.ScalarType type = 1 [default = UNIT];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string string_value = 9;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }

    // optional bool bool_value = 2;
    if (has_bool_value()) {
      total_size += 1 + 1;
    }

    // optional int32 int32_value = 3;
    if (has_int32_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int32_value());
    }

    // optional int64 int64_value = 4;
    if (has_int64_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int64_value());
    }

    // optional uint64 uint64_value = 6;
    if (has_uint64_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uint64_value());
    }

    // optional uint32 uint32_value = 5;
    if (has_uint32_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_value());
    }

    // optional float float_value = 7;
    if (has_float_value()) {
      total_size += 1 + 4;
    }

    // optional double double_value = 8;
    if (has_double_value()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scalar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Scalar)
  GOOGLE_DCHECK_NE(&from, this);
  const Scalar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Scalar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Scalar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Scalar)
    MergeFrom(*source);
  }
}

void Scalar::MergeFrom(const Scalar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Scalar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_string_value()) {
      set_has_string_value();
      string_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_value_);
    }
    if (from.has_bool_value()) {
      set_bool_value(from.bool_value());
    }
    if (from.has_int32_value()) {
      set_int32_value(from.int32_value());
    }
    if (from.has_int64_value()) {
      set_int64_value(from.int64_value());
    }
    if (from.has_uint64_value()) {
      set_uint64_value(from.uint64_value());
    }
    if (from.has_uint32_value()) {
      set_uint32_value(from.uint32_value());
    }
    if (from.has_float_value()) {
      set_float_value(from.float_value());
    }
    if (from.has_double_value()) {
      set_double_value(from.double_value());
    }
  }
  if (from.has_type()) {
    set_type(from.type());
  }
}

void Scalar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Scalar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scalar::CopyFrom(const Scalar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Scalar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scalar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000100) != 0x00000100) return false;
  return true;
}

void Scalar::Swap(Scalar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scalar::InternalSwap(Scalar* other) {
  string_value_.Swap(&other->string_value_);
  std::swap(bool_value_, other->bool_value_);
  std::swap(int32_value_, other->int32_value_);
  std::swap(int64_value_, other->int64_value_);
  std::swap(uint64_value_, other->uint64_value_);
  std::swap(uint32_value_, other->uint32_value_);
  std::swap(float_value_, other->float_value_);
  std::swap(double_value_, other->double_value_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Scalar::GetMetadata() const {
  protobuf_scalar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_scalar_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Scalar

// required .Scalar.ScalarType type = 1 [default = UNIT];
bool Scalar::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Scalar::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
void Scalar::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
void Scalar::clear_type() {
  type_ = 1;
  clear_has_type();
}
::Scalar_ScalarType Scalar::type() const {
  // @@protoc_insertion_point(field_get:Scalar.type)
  return static_cast< ::Scalar_ScalarType >(type_);
}
void Scalar::set_type(::Scalar_ScalarType value) {
  assert(::Scalar_ScalarType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Scalar.type)
}

// optional bool bool_value = 2;
bool Scalar::has_bool_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Scalar::set_has_bool_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Scalar::clear_has_bool_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Scalar::clear_bool_value() {
  bool_value_ = false;
  clear_has_bool_value();
}
bool Scalar::bool_value() const {
  // @@protoc_insertion_point(field_get:Scalar.bool_value)
  return bool_value_;
}
void Scalar::set_bool_value(bool value) {
  set_has_bool_value();
  bool_value_ = value;
  // @@protoc_insertion_point(field_set:Scalar.bool_value)
}

// optional int32 int32_value = 3;
bool Scalar::has_int32_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Scalar::set_has_int32_value() {
  _has_bits_[0] |= 0x00000004u;
}
void Scalar::clear_has_int32_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void Scalar::clear_int32_value() {
  int32_value_ = 0;
  clear_has_int32_value();
}
::google::protobuf::int32 Scalar::int32_value() const {
  // @@protoc_insertion_point(field_get:Scalar.int32_value)
  return int32_value_;
}
void Scalar::set_int32_value(::google::protobuf::int32 value) {
  set_has_int32_value();
  int32_value_ = value;
  // @@protoc_insertion_point(field_set:Scalar.int32_value)
}

// optional int64 int64_value = 4;
bool Scalar::has_int64_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Scalar::set_has_int64_value() {
  _has_bits_[0] |= 0x00000008u;
}
void Scalar::clear_has_int64_value() {
  _has_bits_[0] &= ~0x00000008u;
}
void Scalar::clear_int64_value() {
  int64_value_ = GOOGLE_LONGLONG(0);
  clear_has_int64_value();
}
::google::protobuf::int64 Scalar::int64_value() const {
  // @@protoc_insertion_point(field_get:Scalar.int64_value)
  return int64_value_;
}
void Scalar::set_int64_value(::google::protobuf::int64 value) {
  set_has_int64_value();
  int64_value_ = value;
  // @@protoc_insertion_point(field_set:Scalar.int64_value)
}

// optional uint32 uint32_value = 5;
bool Scalar::has_uint32_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Scalar::set_has_uint32_value() {
  _has_bits_[0] |= 0x00000020u;
}
void Scalar::clear_has_uint32_value() {
  _has_bits_[0] &= ~0x00000020u;
}
void Scalar::clear_uint32_value() {
  uint32_value_ = 0u;
  clear_has_uint32_value();
}
::google::protobuf::uint32 Scalar::uint32_value() const {
  // @@protoc_insertion_point(field_get:Scalar.uint32_value)
  return uint32_value_;
}
void Scalar::set_uint32_value(::google::protobuf::uint32 value) {
  set_has_uint32_value();
  uint32_value_ = value;
  // @@protoc_insertion_point(field_set:Scalar.uint32_value)
}

// optional uint64 uint64_value = 6;
bool Scalar::has_uint64_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Scalar::set_has_uint64_value() {
  _has_bits_[0] |= 0x00000010u;
}
void Scalar::clear_has_uint64_value() {
  _has_bits_[0] &= ~0x00000010u;
}
void Scalar::clear_uint64_value() {
  uint64_value_ = GOOGLE_ULONGLONG(0);
  clear_has_uint64_value();
}
::google::protobuf::uint64 Scalar::uint64_value() const {
  // @@protoc_insertion_point(field_get:Scalar.uint64_value)
  return uint64_value_;
}
void Scalar::set_uint64_value(::google::protobuf::uint64 value) {
  set_has_uint64_value();
  uint64_value_ = value;
  // @@protoc_insertion_point(field_set:Scalar.uint64_value)
}

// optional float float_value = 7;
bool Scalar::has_float_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Scalar::set_has_float_value() {
  _has_bits_[0] |= 0x00000040u;
}
void Scalar::clear_has_float_value() {
  _has_bits_[0] &= ~0x00000040u;
}
void Scalar::clear_float_value() {
  float_value_ = 0;
  clear_has_float_value();
}
float Scalar::float_value() const {
  // @@protoc_insertion_point(field_get:Scalar.float_value)
  return float_value_;
}
void Scalar::set_float_value(float value) {
  set_has_float_value();
  float_value_ = value;
  // @@protoc_insertion_point(field_set:Scalar.float_value)
}

// optional double double_value = 8;
bool Scalar::has_double_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Scalar::set_has_double_value() {
  _has_bits_[0] |= 0x00000080u;
}
void Scalar::clear_has_double_value() {
  _has_bits_[0] &= ~0x00000080u;
}
void Scalar::clear_double_value() {
  double_value_ = 0;
  clear_has_double_value();
}
double Scalar::double_value() const {
  // @@protoc_insertion_point(field_get:Scalar.double_value)
  return double_value_;
}
void Scalar::set_double_value(double value) {
  set_has_double_value();
  double_value_ = value;
  // @@protoc_insertion_point(field_set:Scalar.double_value)
}

// optional string string_value = 9;
bool Scalar::has_string_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Scalar::set_has_string_value() {
  _has_bits_[0] |= 0x00000001u;
}
void Scalar::clear_has_string_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void Scalar::clear_string_value() {
  string_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string_value();
}
const ::std::string& Scalar::string_value() const {
  // @@protoc_insertion_point(field_get:Scalar.string_value)
  return string_value_.GetNoArena();
}
void Scalar::set_string_value(const ::std::string& value) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Scalar.string_value)
}
#if LANG_CXX11
void Scalar::set_string_value(::std::string&& value) {
  set_has_string_value();
  string_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Scalar.string_value)
}
#endif
void Scalar::set_string_value(const char* value) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Scalar.string_value)
}
void Scalar::set_string_value(const char* value, size_t size) {
  set_has_string_value();
  string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Scalar.string_value)
}
::std::string* Scalar::mutable_string_value() {
  set_has_string_value();
  // @@protoc_insertion_point(field_mutable:Scalar.string_value)
  return string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Scalar::release_string_value() {
  // @@protoc_insertion_point(field_release:Scalar.string_value)
  clear_has_string_value();
  return string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Scalar::set_allocated_string_value(::std::string* string_value) {
  if (string_value != NULL) {
    set_has_string_value();
  } else {
    clear_has_string_value();
  }
  string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_value);
  // @@protoc_insertion_point(field_set_allocated:Scalar.string_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmptyProto::EmptyProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_scalar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:EmptyProto)
}
EmptyProto::EmptyProto(const EmptyProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:EmptyProto)
}

void EmptyProto::SharedCtor() {
  _cached_size_ = 0;
}

EmptyProto::~EmptyProto() {
  // @@protoc_insertion_point(destructor:EmptyProto)
  SharedDtor();
}

void EmptyProto::SharedDtor() {
}

void EmptyProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmptyProto::descriptor() {
  protobuf_scalar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_scalar_2eproto::file_level_metadata[1].descriptor;
}

const EmptyProto& EmptyProto::default_instance() {
  protobuf_scalar_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmptyProto* EmptyProto::New(::google::protobuf::Arena* arena) const {
  EmptyProto* n = new EmptyProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmptyProto::Clear() {
// @@protoc_insertion_point(message_clear_start:EmptyProto)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmptyProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EmptyProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:EmptyProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EmptyProto)
  return false;
#undef DO_
}

void EmptyProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EmptyProto)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EmptyProto)
}

::google::protobuf::uint8* EmptyProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EmptyProto)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EmptyProto)
  return target;
}

size_t EmptyProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EmptyProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmptyProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EmptyProto)
  GOOGLE_DCHECK_NE(&from, this);
  const EmptyProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmptyProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EmptyProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EmptyProto)
    MergeFrom(*source);
  }
}

void EmptyProto::MergeFrom(const EmptyProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EmptyProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void EmptyProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EmptyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyProto::CopyFrom(const EmptyProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EmptyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyProto::IsInitialized() const {
  return true;
}

void EmptyProto::Swap(EmptyProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmptyProto::InternalSwap(EmptyProto* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmptyProto::GetMetadata() const {
  protobuf_scalar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_scalar_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmptyProto

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UInt64Pair::kFirstFieldNumber;
const int UInt64Pair::kSecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UInt64Pair::UInt64Pair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_scalar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:UInt64Pair)
}
UInt64Pair::UInt64Pair(const UInt64Pair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&first_, &from.first_,
    reinterpret_cast<char*>(&second_) -
    reinterpret_cast<char*>(&first_) + sizeof(second_));
  // @@protoc_insertion_point(copy_constructor:UInt64Pair)
}

void UInt64Pair::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&first_, 0, reinterpret_cast<char*>(&second_) -
    reinterpret_cast<char*>(&first_) + sizeof(second_));
}

UInt64Pair::~UInt64Pair() {
  // @@protoc_insertion_point(destructor:UInt64Pair)
  SharedDtor();
}

void UInt64Pair::SharedDtor() {
}

void UInt64Pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UInt64Pair::descriptor() {
  protobuf_scalar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_scalar_2eproto::file_level_metadata[2].descriptor;
}

const UInt64Pair& UInt64Pair::default_instance() {
  protobuf_scalar_2eproto::InitDefaults();
  return *internal_default_instance();
}

UInt64Pair* UInt64Pair::New(::google::protobuf::Arena* arena) const {
  UInt64Pair* n = new UInt64Pair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UInt64Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:UInt64Pair)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&first_, 0, reinterpret_cast<char*>(&second_) -
      reinterpret_cast<char*>(&first_) + sizeof(second_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UInt64Pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UInt64Pair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 first = 1;
      case 1: {
        if (tag == 8u) {
          set_has_first();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &first_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 second = 2;
      case 2: {
        if (tag == 16u) {
          set_has_second();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UInt64Pair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UInt64Pair)
  return false;
#undef DO_
}

void UInt64Pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UInt64Pair)
  // optional uint64 first = 1;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->first(), output);
  }

  // optional uint64 second = 2;
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->second(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UInt64Pair)
}

::google::protobuf::uint8* UInt64Pair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UInt64Pair)
  // optional uint64 first = 1;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->first(), target);
  }

  // optional uint64 second = 2;
  if (has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->second(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UInt64Pair)
  return target;
}

size_t UInt64Pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UInt64Pair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 first = 1;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->first());
    }

    // optional uint64 second = 2;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->second());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UInt64Pair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UInt64Pair)
  GOOGLE_DCHECK_NE(&from, this);
  const UInt64Pair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UInt64Pair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UInt64Pair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UInt64Pair)
    MergeFrom(*source);
  }
}

void UInt64Pair::MergeFrom(const UInt64Pair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UInt64Pair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_second()) {
      set_second(from.second());
    }
  }
}

void UInt64Pair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UInt64Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UInt64Pair::CopyFrom(const UInt64Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UInt64Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UInt64Pair::IsInitialized() const {
  return true;
}

void UInt64Pair::Swap(UInt64Pair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UInt64Pair::InternalSwap(UInt64Pair* other) {
  std::swap(first_, other->first_);
  std::swap(second_, other->second_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UInt64Pair::GetMetadata() const {
  protobuf_scalar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_scalar_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UInt64Pair

// optional uint64 first = 1;
bool UInt64Pair::has_first() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UInt64Pair::set_has_first() {
  _has_bits_[0] |= 0x00000001u;
}
void UInt64Pair::clear_has_first() {
  _has_bits_[0] &= ~0x00000001u;
}
void UInt64Pair::clear_first() {
  first_ = GOOGLE_ULONGLONG(0);
  clear_has_first();
}
::google::protobuf::uint64 UInt64Pair::first() const {
  // @@protoc_insertion_point(field_get:UInt64Pair.first)
  return first_;
}
void UInt64Pair::set_first(::google::protobuf::uint64 value) {
  set_has_first();
  first_ = value;
  // @@protoc_insertion_point(field_set:UInt64Pair.first)
}

// optional uint64 second = 2;
bool UInt64Pair::has_second() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UInt64Pair::set_has_second() {
  _has_bits_[0] |= 0x00000002u;
}
void UInt64Pair::clear_has_second() {
  _has_bits_[0] &= ~0x00000002u;
}
void UInt64Pair::clear_second() {
  second_ = GOOGLE_ULONGLONG(0);
  clear_has_second();
}
::google::protobuf::uint64 UInt64Pair::second() const {
  // @@protoc_insertion_point(field_get:UInt64Pair.second)
  return second_;
}
void UInt64Pair::set_second(::google::protobuf::uint64 value) {
  set_has_second();
  second_ = value;
  // @@protoc_insertion_point(field_set:UInt64Pair.second)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sequence::kBatchIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sequence::Sequence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_scalar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Sequence)
}
Sequence::Sequence(const Sequence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      batch_ids_(from.batch_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Sequence)
}

void Sequence::SharedCtor() {
  _cached_size_ = 0;
}

Sequence::~Sequence() {
  // @@protoc_insertion_point(destructor:Sequence)
  SharedDtor();
}

void Sequence::SharedDtor() {
}

void Sequence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sequence::descriptor() {
  protobuf_scalar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_scalar_2eproto::file_level_metadata[3].descriptor;
}

const Sequence& Sequence::default_instance() {
  protobuf_scalar_2eproto::InitDefaults();
  return *internal_default_instance();
}

Sequence* Sequence::New(::google::protobuf::Arena* arena) const {
  Sequence* n = new Sequence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sequence::Clear() {
// @@protoc_insertion_point(message_clear_start:Sequence)
  batch_ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Sequence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Sequence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 batch_ids = 1;
      case 1: {
        if (tag == 8u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_batch_ids())));
        } else if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_batch_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Sequence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Sequence)
  return false;
#undef DO_
}

void Sequence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Sequence)
  // repeated uint64 batch_ids = 1;
  for (int i = 0; i < this->batch_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->batch_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Sequence)
}

::google::protobuf::uint8* Sequence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Sequence)
  // repeated uint64 batch_ids = 1;
  for (int i = 0; i < this->batch_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->batch_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Sequence)
  return target;
}

size_t Sequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Sequence)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint64 batch_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->batch_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->batch_ids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sequence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Sequence)
  GOOGLE_DCHECK_NE(&from, this);
  const Sequence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sequence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Sequence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Sequence)
    MergeFrom(*source);
  }
}

void Sequence::MergeFrom(const Sequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Sequence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  batch_ids_.MergeFrom(from.batch_ids_);
}

void Sequence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Sequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sequence::CopyFrom(const Sequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Sequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sequence::IsInitialized() const {
  return true;
}

void Sequence::Swap(Sequence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sequence::InternalSwap(Sequence* other) {
  batch_ids_.UnsafeArenaSwap(&other->batch_ids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sequence::GetMetadata() const {
  protobuf_scalar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_scalar_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sequence

// repeated uint64 batch_ids = 1;
int Sequence::batch_ids_size() const {
  return batch_ids_.size();
}
void Sequence::clear_batch_ids() {
  batch_ids_.Clear();
}
::google::protobuf::uint64 Sequence::batch_ids(int index) const {
  // @@protoc_insertion_point(field_get:Sequence.batch_ids)
  return batch_ids_.Get(index);
}
void Sequence::set_batch_ids(int index, ::google::protobuf::uint64 value) {
  batch_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Sequence.batch_ids)
}
void Sequence::add_batch_ids(::google::protobuf::uint64 value) {
  batch_ids_.Add(value);
  // @@protoc_insertion_point(field_add:Sequence.batch_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Sequence::batch_ids() const {
  // @@protoc_insertion_point(field_list:Sequence.batch_ids)
  return batch_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Sequence::mutable_batch_ids() {
  // @@protoc_insertion_point(field_mutable_list:Sequence.batch_ids)
  return &batch_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SequenceBatch::kSequenceBatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SequenceBatch::SequenceBatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_scalar_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SequenceBatch)
}
SequenceBatch::SequenceBatch(const SequenceBatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sequence_batch_(from.sequence_batch_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SequenceBatch)
}

void SequenceBatch::SharedCtor() {
  _cached_size_ = 0;
}

SequenceBatch::~SequenceBatch() {
  // @@protoc_insertion_point(destructor:SequenceBatch)
  SharedDtor();
}

void SequenceBatch::SharedDtor() {
}

void SequenceBatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SequenceBatch::descriptor() {
  protobuf_scalar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_scalar_2eproto::file_level_metadata[4].descriptor;
}

const SequenceBatch& SequenceBatch::default_instance() {
  protobuf_scalar_2eproto::InitDefaults();
  return *internal_default_instance();
}

SequenceBatch* SequenceBatch::New(::google::protobuf::Arena* arena) const {
  SequenceBatch* n = new SequenceBatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SequenceBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:SequenceBatch)
  sequence_batch_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SequenceBatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SequenceBatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Sequence sequence_batch = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sequence_batch()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SequenceBatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SequenceBatch)
  return false;
#undef DO_
}

void SequenceBatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SequenceBatch)
  // repeated .Sequence sequence_batch = 1;
  for (unsigned int i = 0, n = this->sequence_batch_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sequence_batch(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SequenceBatch)
}

::google::protobuf::uint8* SequenceBatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SequenceBatch)
  // repeated .Sequence sequence_batch = 1;
  for (unsigned int i = 0, n = this->sequence_batch_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sequence_batch(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SequenceBatch)
  return target;
}

size_t SequenceBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SequenceBatch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .Sequence sequence_batch = 1;
  {
    unsigned int count = this->sequence_batch_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sequence_batch(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SequenceBatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SequenceBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const SequenceBatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SequenceBatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SequenceBatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SequenceBatch)
    MergeFrom(*source);
  }
}

void SequenceBatch::MergeFrom(const SequenceBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SequenceBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sequence_batch_.MergeFrom(from.sequence_batch_);
}

void SequenceBatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SequenceBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SequenceBatch::CopyFrom(const SequenceBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SequenceBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceBatch::IsInitialized() const {
  return true;
}

void SequenceBatch::Swap(SequenceBatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SequenceBatch::InternalSwap(SequenceBatch* other) {
  sequence_batch_.UnsafeArenaSwap(&other->sequence_batch_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SequenceBatch::GetMetadata() const {
  protobuf_scalar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_scalar_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SequenceBatch

// repeated .Sequence sequence_batch = 1;
int SequenceBatch::sequence_batch_size() const {
  return sequence_batch_.size();
}
void SequenceBatch::clear_sequence_batch() {
  sequence_batch_.Clear();
}
const ::Sequence& SequenceBatch::sequence_batch(int index) const {
  // @@protoc_insertion_point(field_get:SequenceBatch.sequence_batch)
  return sequence_batch_.Get(index);
}
::Sequence* SequenceBatch::mutable_sequence_batch(int index) {
  // @@protoc_insertion_point(field_mutable:SequenceBatch.sequence_batch)
  return sequence_batch_.Mutable(index);
}
::Sequence* SequenceBatch::add_sequence_batch() {
  // @@protoc_insertion_point(field_add:SequenceBatch.sequence_batch)
  return sequence_batch_.Add();
}
::google::protobuf::RepeatedPtrField< ::Sequence >*
SequenceBatch::mutable_sequence_batch() {
  // @@protoc_insertion_point(field_mutable_list:SequenceBatch.sequence_batch)
  return &sequence_batch_;
}
const ::google::protobuf::RepeatedPtrField< ::Sequence >&
SequenceBatch::sequence_batch() const {
  // @@protoc_insertion_point(field_list:SequenceBatch.sequence_batch)
  return sequence_batch_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
